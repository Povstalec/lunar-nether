plugins {
    id "eclipse"
    id "idea"
    id "maven-publish"
    alias(libs.plugins.moddev)
    alias(libs.plugins.mdg)
    alias(libs.plugins.curseforgegradle)
    alias(libs.plugins.minotaur)
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

modsDotGroovy {
    multiplatform {
        gather {
            projectProperty("mod_id")
            projectProperty("mod_name")
            projectProperty("mod_license")
            projectProperty("authors")
            projectProperty("mod_description")
            projectProperty("mod_source_url")
            projectProperty("mod_issues_url")
            projectProperty("mod_display_url")
        }
        expose()
    }
}

sourceSets {
    main {
        resources {
            srcDirs += "src/generated/resources"
        }
    }
    datagen {
        compileClasspath += main.compileClasspath + main.output
        runtimeClasspath += main.runtimeClasspath + main.output
    }
}

neoForge {
    version = version = libs.neoforge.get().version
    parchment {
        minecraftVersion = libs.versions.parchment.minecraft.get()
        mappingsVersion = libs.versions.parchment.release.get()
    }

    accessTransformers.from(file("src/main/resources/META-INF/accesstransformer.cfg"))

    runs {
        client {
            client()
            ideName = "Neo Client"
        }
        server {
            server()
            ideName = "Neo Server"
        }
        data {
            data()
            ideName = "Neo Data"

            programArgument("'--mod', ${mod_id}, '--all', '--output', ${file('src/generated/resources/')}, '--existing', ${file('src/main/resources/')}")
        }
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    implementation libs.trimmed
    implementation libs.patched
}

processResources {
    exclude(".cache", "mods.groovy")
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain.getLanguageVersion().set(JavaLanguageVersion.of(21))
}

sourcesJar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_id}" }
    }
}

tasks.jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy "reobfJar"
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.getRelease().set(21)
}

if (hasProperty("modrinth_write_version_pat")) {
    modrinth {
        token = findProperty("modrinth_write_version_pat") as String
        projectId = properties["modrinth_project_id"] as String
        versionName = "${libs.versions.minecraft.release.get()}-${properties["mod_version"]}"
        versionNumber = "${libs.versions.minecraft.release.get()}-${properties["mod_version"]}+neoforge"
        versionType = properties["publish_type"] as String
        uploadFile.set(tasks.jar)
        gameVersions = List.of(libs.versions.publish.range.get().split(","))
        loaders = List.of("neoforge")
        changelog = rootProject.file("changelog.md").text
        additionalFiles = List.of(tasks.named("sourcesJar"), tasks.named("javadocJar"))
        detectLoaders = false
        debugMode = properties["publish_debug"].toString().toBoolean()
    }
}

if (hasProperty("curseforge_publishing_token")) {
    tasks.register("curseforge", net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        group = "publishing"

        disableVersionDetection()
        apiToken = findProperty("curseforge_publishing_token")
        def projectId = properties["curseforge_project_id"]
        def mainFile = upload(projectId, tasks.jar)
        mainFile.displayName = "${libs.versions.minecraft.release.get()}-${properties["mod_version"]}"
        mainFile.releaseType = properties["publish_type"]
        mainFile.changelog = rootProject.file("changelog.md").text
        mainFile.changelogType = "markdown"
        mainFile.addModLoader("NeoForge")
        mainFile.addJavaVersion("Java ${java.toolchain.languageVersion.get()}")
        mainFile.addGameVersion(libs.versions.minecraft.release.get())
        debugMode = properties["publish_debug"].toString().toBoolean()

        dependsOn(tasks.remapJar)
    }
}